name: Build rtop Binaries

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch: # Allow manual triggering

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            goos: linux
            goarch: amd64
            binary_name: rtop
            asset_name: rtop-linux-amd64
          - os: linux
            goos: linux
            goarch: arm64
            binary_name: rtop
            asset_name: rtop-linux-arm64
          - os: darwin
            goos: darwin
            goarch: amd64
            binary_name: rtop
            asset_name: rtop-darwin-amd64
          - os: darwin
            goos: darwin
            goarch: arm64
            binary_name: rtop
            asset_name: rtop-darwin-arm64
          - os: windows
            goos: windows
            goarch: amd64
            binary_name: rtop.exe
            asset_name: rtop-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          check-latest: true

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -v -o ${{ matrix.binary_name }} -ldflags="-s -w" .
          # Create a zip or tar.gz for the binary
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            zip -r ${{ matrix.asset_name }}.zip ${{ matrix.binary_name }}
          else
            tar -czvf ${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.binary_name }}
            ${{ matrix.asset_name }}.*

  # Create GitHub release and upload binaries if tag is pushed
  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            ./artifacts/*/*.zip
            ./artifacts/*/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}